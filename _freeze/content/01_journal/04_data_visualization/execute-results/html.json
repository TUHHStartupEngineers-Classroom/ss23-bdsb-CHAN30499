{
  "hash": "981b96e691a10fbf80cb132c4a0e5f55",
  "result": {
    "markdown": "---\nauthor: \"Chandana Guddenahalli Palaksha\"\ntitle: \"04 Data Visualization\"\ndate: \"2023-05\"\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    df_print: paged\n    collapsed: false\n    number_sections: true\n    toc_depth: 3\n    code_folding: hide\n---\n\n\n\n\n# Fourth Assignment : Data Visualization\n\n### Map the time course of the cumulative Covid-19 cases\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-1_ca1e2f6afde71a79e0061f8f00b3b317'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(scales)\ncovid_data_tbl <- read_csv(\"https://opendata.ecdc.europa.eu/covid19/casedistribution/csv\")\ncovid_data_tbl <- covid_data_tbl[order(as.Date(covid_data_tbl$dateRep, format=\"%d/%m/%Y\")),]\n\ncovid_data_tbl2 <- covid_data_tbl %>%\n  filter(countriesAndTerritories %in% c('Spain', 'United_Kingdom', 'France', 'Germany','United_States_of_America')) %>%\n  select(dateRep, countriesAndTerritories, cases) %>%\n  group_by(countriesAndTerritories) %>%\n  mutate(cumulativeCases = cumsum(cases))  %>%\n  select(dateRep, countriesAndTerritories, cumulativeCases) %>%\n  rename(countries = countriesAndTerritories)\n# Plotting the values \nticks = c(\"Dec\",\"Jan\", 'Feb','March', 'April', 'May', 'June','July',\n          'Aug','Sept','Oct','Nov','Dec')\ny_ticks = seq(0,max(covid_data_tbl2$cumulativeCases),1250000)\ncovid_data_tbl2 %>%\n  ggplot(aes(x = as.POSIXct(dateRep, format = '%d/%m/%Y'), y = cumulativeCases)) +\n  geom_line(aes(color = countries), size = 1) +\n  labs(x = 'Year 2020', y='Cumulative Cases', fill = 'Countries') +\n  scale_x_datetime(date_breaks = 'month', labels = label_date_short()) +\n  scale_y_continuous(breaks = c(y_ticks))\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n### Visualize the distribution of the mortality rate (deaths / population)\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-2_1e29501cf649735f1ea499165b33adf2'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(ggplot2)\ntheme_set(\n  theme_dark()\n)\ncovid_data_tbl <- read_csv(\"https://opendata.ecdc.europa.eu/covid19/casedistribution/csv\")\n\nworld <- map_data('world') %>%\n  rename(countries = region) %>%\n  dplyr::select(countries,long,lat,group) \n  \ncovid_data_tbl <- covid_data_tbl %>%\n  mutate(across(countriesAndTerritories, str_replace_all, \"_\", \" \")) %>%\n  mutate(countriesAndTerritories = case_when(\n    \n    countriesAndTerritories == \"United Kingdom\" ~ \"UK\",\n    countriesAndTerritories == \"United States of America\" ~ \"USA\",\n    countriesAndTerritories == \"Czechia\" ~ \"Czech Republic\",\n    TRUE ~ countriesAndTerritories\n    \n  ))\npopulation <- covid_data_tbl %>%\n  group_by(countriesAndTerritories) %>%\n  dplyr::select(countriesAndTerritories, popData2019) %>%\n  unique() %>%\n  rename(countries = countriesAndTerritories)\n  \nmortality_rate_tbl <- covid_data_tbl %>%\n  group_by(countriesAndTerritories) %>%\n  summarise( \n    total_deaths = sum(deaths)\n    ) %>%\n  rename(countries = countriesAndTerritories)\nuseful_map <- left_join(population,mortality_rate_tbl, by = \"countries\")\nfinal_tbl <- left_join(world, useful_map, by = 'countries') %>%\n  mutate(mort_rate = total_deaths / popData2019)\n#plotting the values\nggplot(final_tbl, aes(long, lat, group = group))+\n  geom_polygon(aes(fill = mort_rate), color = \"white\")+\n  scale_fill_gradient(low = 'orange', high = 'red', na.value = 'white')\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}